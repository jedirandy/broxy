/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef broxy_TYPES_H
#define broxy_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace broxy {

class Response;

class Request;

typedef struct _Response__isset {
  _Response__isset() : code(false), body(false) {}
  bool code :1;
  bool body :1;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : code(0), body() {
  }

  virtual ~Response() throw();
  int32_t code;
  std::string body;

  _Response__isset __isset;

  void __set_code(const int32_t val);

  void __set_body(const std::string& val);

  bool operator == (const Response & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Response& obj);
};

void swap(Response &a, Response &b);

typedef struct _Request__isset {
  _Request__isset() : url(false) {}
  bool url :1;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Request(const Request&);
  Request& operator=(const Request&);
  Request() : url() {
  }

  virtual ~Request() throw();
  std::string url;

  _Request__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const Request & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Request& obj);
};

void swap(Request &a, Request &b);

} // namespace

#endif
